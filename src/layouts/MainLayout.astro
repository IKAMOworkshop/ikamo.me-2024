---
import '../styles/style.css'
import '../styles/reset.css'

// Components
import Navigation from '../components/Navigation.astro'

interface Props {
	title: string;
}
const { title } = Astro.props;
---

<!doctype html>
<html lang="en">
	<head>
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />

		<meta property="og:type" content="website">
		<meta property="og:image" content="/banner.png">
		<meta property="og:title" content={title}>
		<meta property="og:description" content="A dedicated space for share my learning and life hightlights as a creative developer.">
		<meta name="twitter:title" content={title}>
		<meta name="twitter:description" content="A dedicated space for share my learning and life hightlights as a creative developer.">
		<meta name="twitter:image:src" content="/banner.png">
		<meta name="twitter:card" content="summary_large_image">

		<meta charset="UTF-8" />
		<meta name="description" content="Astro description" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
	</head>

	<body class="body">
		<Navigation />
		<main data-taxi>
			<slot/>
		</main>
		<canvas id="webgl"></canvas>
		<script>
			// Three.js
			import Experience from '../experience/Experience.js'
			const experience = new Experience(document.getElementById('webgl'));

			import * as Taxi from '@unseenco/taxi'
			const taxi = new Taxi.Core()

			let activePage = window.location.pathname
			let navButton = document.querySelectorAll('.navigation-light')

			import VirtualScroll from 'virtual-scroll'

			const scroller = new VirtualScroll()

			let scrollContainer = document.getElementById('scroll')
			let scrollProgress = document.getElementById('scroll-progress')
			let progressBox = document.getElementById('progress-box')

			// Page Scroll
			let scroll = 0
			let scrollTarget = 0
			let scrollPosition = 0
			let scrollPercentage = 0
			let containerSize = null
			// if(scrollContainer){
			// 	containerSize = scrollContainer.getBoundingClientRect().width
			// }

			scroller.on(event => {
				scrollTarget = - event.deltaY
			})

			const tick = () => {
				if(!scrollContainer){
					scrollPosition = 0
				}
				// Reset Scroll
				scrollContainer = document.getElementById('scroll')
				scrollProgress = document.getElementById('scroll-progress')
				progressBox = document.getElementById('progress-box')

				if(scrollContainer){
					containerSize = scrollContainer.getBoundingClientRect().width
				}
				
				scroll -= (scroll - scrollTarget) * .1
				scrollPosition += scroll * 1.2
				scrollTarget = 0

				scrollPosition = Math.max(0, Math.min(scrollPosition, containerSize - window.innerWidth))

				if(scrollContainer){
					scrollContainer.style.transform = `translateX(${-scrollPosition}px)`
					containerSize = scrollContainer.getBoundingClientRect().width
				}

				if(scrollProgress){
					scrollPercentage = (scrollPosition / (containerSize - window.innerWidth)) * (progressBox.getBoundingClientRect().width - scrollProgress.getBoundingClientRect().width)
					scrollProgress.style.transform = `translateX(${scrollPercentage}px)`
				}

				window.requestAnimationFrame(tick)
			}

			tick()
		</script>
	</body>
</html>
